name: frappe_docker

# Extension fields for common configurations
x-common-frappe-service: &common-frappe-service
  image: anvie/erp:1.0.0
  platform: linux/arm64
  pull_policy: always
  restart: unless-stopped
  networks:
    default: null

x-common-environment: &common-environment
  MYSQL_ROOT_PASSWORD: admin
  ADMIN_PASSWORD: admin
  SITE_NAME: frontend
  DB_HOST: db
  DB_PORT: "3306"
  REDIS_CACHE: redis-cache:6379
  REDIS_QUEUE: redis-queue:6379
  SOCKETIO_PORT: "9000"

x-common-volumes: &common-volumes
  - ${FRAPPE_BENCH_PATH:-./frappe-bench}:/home/frappe/frappe-bench
  - ${FRAPPE_BENCH_PATH:-./frappe-bench}/sites:/home/frappe/frappe-bench/sites
  - logs:/home/frappe/frappe-bench/logs

x-common-volumes-with-assets: &common-volumes-with-assets
  - ${FRAPPE_BENCH_PATH:-./frappe-bench}:/home/frappe/frappe-bench
  - ${FRAPPE_BENCH_PATH:-./frappe-bench}/sites:/home/frappe/frappe-bench/sites
  - ${FRAPPE_BENCH_PATH:-./frappe-bench}/sites/assets:/home/frappe/frappe-bench/sites/assets
  - logs:/home/frappe/frappe-bench/logs

x-frappe-service-with-configurator: &frappe-service-with-configurator
  <<: *common-frappe-service
  depends_on:
    configurator:
      condition: service_completed_successfully

services:
  backend:
    <<: *frappe-service-with-configurator
    command: |
      bash -c "
        echo 'Starting backend services...'
        
        
        echo 'Site setup completed, starting server...'
        bench serve --port 8000 --noreload
      "
    environment:
      <<: *common-environment
    volumes: *common-volumes-with-assets

  configurator:
    build:
      context: .
      dockerfile: Dockerfile.configurator
    platform: linux/arm64
    pull_policy: always
    restart: on-failure
    networks:
      default: null
    command:
      - |
        echo "Setting up Frappe environment..."

        # Check if virtual environment exists - REQUIRED
        if [ ! -f "env/bin/activate" ]; then
          echo "ERROR: Virtual environment not found at env/bin/activate"
          echo "Please ensure the virtual environment is properly set up before running configurator"
          exit 1
        fi

        echo "Using virtual environment..."
        source env/bin/activate

        # Ensure pip is installed in virtual environment
        python -m ensurepip --upgrade || python -m pip install --upgrade pip

        # Install all apps that have setup.py or pyproject.toml files
        echo "Installing all Frappe apps from source..."
        for app_dir in apps/*/; do
          if [ -f "$$app_dir/setup.py" ] || [ -f "$$app_dir/pyproject.toml" ]; then
            app_name=$$(basename "$$app_dir")
            # Check if app is already installed
            if pip show "$$app_name" > /dev/null 2>&1; then
              echo "$$app_name is already installed, skipping..."
            else
              echo "Installing $$app_name from source into virtual environment..."
              pip install -e "$$app_dir"
            fi
          fi
        done

        # Install required dependencies in virtual environment
        pip install pymysql redis rq python-dateutil pytz

        # Install frontend dependencies and build assets with yarn
        echo "Installing frontend dependencies with yarn..."
        for app_dir in apps/*/; do
          if [ -f "$$app_dir/yarn.lock" ]; then
            app_name=$$(basename "$$app_dir")
            echo "Installing yarn dependencies for $$app_name..."
            cd "$$app_dir"
            yarn install --frozen-lockfile
            cd /home/frappe/frappe-bench
          fi
        done


        # Configure bench settings
        bench set-config -g db_host $$DB_HOST
        bench set-config -gp db_port $$DB_PORT
        bench set-config -g redis_cache "redis://$$REDIS_CACHE"
        bench set-config -g redis_queue "redis://$$REDIS_QUEUE"
        bench set-config -g redis_socketio "redis://$$REDIS_QUEUE"
        bench set-config -gp socketio_port $$SOCKETIO_PORT

        # Create apps.txt
        ls -1 apps > sites/apps.txt 2>/dev/null || true


        # Create new site with environment variables
        echo 'Creating new site...'
        if [ ! -d 'sites/$$SITE_NAME' ]; then
          bench new-site $$SITE_NAME \
            --force \
            --admin-password $$ADMIN_PASSWORD \
            --db-root-password $$MYSQL_ROOT_PASSWORD \
            --set-default \
            --install-app erpnext \
            --install-app lms
        else
          echo 'Site $$SITE_NAME already exists, skipping creation...'
        fi

        # Build frontend assets
        echo "Building frontend assets..."
        bench build

        echo "Configuration completed successfully"
    depends_on:
      db:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
      redis-queue:
        condition: service_healthy
    entrypoint:
      - bash
      - -c
    environment:
      <<: *common-environment
    volumes:
      - ${FRAPPE_BENCH_PATH:-./frappe-bench}:/home/frappe/frappe-bench
      - logs:/home/frappe/frappe-bench/logs

  db:
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --skip-character-set-client-handshake
      - --skip-innodb-read-only-compressed
    environment:
      MYSQL_ROOT_PASSWORD: admin
    healthcheck:
      test:
        - CMD-SHELL
        - mysqladmin ping -h localhost --password=admin
      interval: 1s
      retries: 20
    image: mariadb:10.6
    networks:
      default: null
    restart: unless-stopped
    volumes:
      - type: volume
        source: db-data
        target: /var/lib/mysql
        volume: {}

  frontend:
    <<: *common-frappe-service
    command:
      - nginx-entrypoint.sh
    depends_on:
      backend:
        condition: service_started
      websocket:
        condition: service_started
    environment:
      BACKEND: backend:8000
      CLIENT_MAX_BODY_SIZE: 50m
      FRAPPE_SITE_NAME_HEADER: frontend
      PROXY_READ_TIMEOUT: "120"
      SOCKETIO: websocket:9000
      UPSTREAM_REAL_IP_ADDRESS: 127.0.0.1
      UPSTREAM_REAL_IP_HEADER: X-Forwarded-For
      UPSTREAM_REAL_IP_RECURSIVE: "off"
    volumes: *common-volumes-with-assets
    ports:
      - "8080:8080"

  queue-long:
    <<: *frappe-service-with-configurator
    command:
      - bench
      - worker
      - --queue
      - long,default,short
    volumes: *common-volumes

  queue-short:
    <<: *frappe-service-with-configurator
    command:
      - bench
      - worker
      - --queue
      - short,default
    volumes: *common-volumes

  redis-cache:
    image: redis:6.2-alpine
    networks:
      default: null
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - redis-cli ping
      interval: 5s
      timeout: 3s
      retries: 5

  redis-queue:
    image: redis:6.2-alpine
    networks:
      default: null
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - redis-cli ping
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - type: volume
        source: redis-queue-data
        target: /data
        volume: {}

  scheduler:
    <<: *frappe-service-with-configurator
    command:
      - bench
      - schedule
    volumes: *common-volumes

  websocket:
    <<: *frappe-service-with-configurator
    command:
      - node
      - /home/frappe/frappe-bench/apps/frappe/socketio.js
    volumes:
      - ${FRAPPE_BENCH_PATH:-./frappe-bench}/sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

networks:
  default:
    name: frappe_docker_default

volumes:
  db-data:
    name: frappe_docker_db-data
  redis-queue-data:
    name: frappe_docker_redis-queue-data
  redis-data:
  logs:
